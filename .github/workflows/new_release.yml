name: Déploiement sur Firebase Hosting, environnement de production
'on':
  release:
    types:
      - published
jobs:
  install_dependencies_and_unit_test:
    name: Installation des dépendances et lancements des tests unitaires
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Installation des packages
          run: npm ci

        - name: Lancement des tests unitaires
          run: npm test

  sonarcloud_test:
    name: Lancement des tests sonar-cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  trivy_test_dockerfile:
    name: Lancement des tests Trivy sur le Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build de l'image provenant du Dockerfile
        run: |
          docker build -t docker.io/tp-devops:${{ github.sha }} .

      - name: Lancement du scanner de Trivy sur l'image Docker
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/tp-devops:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-docker.sarif'

      - name: Upload des résultats du scan sur l'onglet Sécurité de GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-docker.sarif'

  trivy_test_repository:
    name: Lancement des tests Trivy sur le repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lancement du scanner de Trivy sur le repository
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results-repository.sarif'
          severity: 'CRITICAL'

      - name: Upload des résultats du scan sur l'onglet Sécurité de GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-repository.sarif'

  deploy_on_firebase:
    name: Déploiement sur Firebase
    needs: [install_dependencies_and_unit_test, sonarcloud_test, trivy_test_dockerfile, trivy_test_repository]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Renommage fichier production.html en index.html
        run: cd public && mv production.html index.html

      - name: Déploiement sur l'environnement de production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_TP_DEVOPS }}"
          channelId: live
          projectId: tp-devops
          target: tp-devops

  create_artifact_and_upload_on_workflow:
    name: Création et upload de l'artéfact du workflow courant
    needs: deploy_on_firebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Upload of the artifact
        uses: actions/upload-artifact@v3
        with:
          name: express_artifact
          path: .

  upload_artifact_on_npm_packages:
    name: Upload de l'artéfact sur le gestionnaire de packages NPM
    needs: create_artifact_and_upload_on_workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: Setup credentials git name
        run: git config --global user.name "EliottClavier"

      - name: Setup credentials git email
        run: git config --global user.email "clavier.eliott.el@gmail.com"

      - name: Installation des dépendances
        run: npm ci

      - name: Création d'une nouvelle version
        run: npm version ${{ github.event.release.tag_name }}

      - name: Publication du package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  notification_on_discord:
    name: Envoi d'une notification Discord
    needs: upload_artifact_on_npm_packages
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "@everyone Le {{ EVENT_PAYLOAD.repository.full_name }} n'a pas eu de problèmes lors de la phase de test et a bien été déployé sur l'environnement de production https://tp-devops.web.app."
